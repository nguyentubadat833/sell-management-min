// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NUXT_DATABASE_URL")
}

model Image {
  name      String   @id
  link      String?
  location  String
  uploadAt  DateTime @default(now())
  uploadBy  String
  productId String?

  product Product? @relation(fields: [productId], references: [id])
}

model Account {
  id                String   @id @default(cuid())
  provider          String
  providerAccountId String
  email             String?
  profile           Json?
  userType          String
  registerAt        DateTime @default(now())
  orders            Order[]

  @@unique([provider, providerAccountId])
}

model Category {
  id          String  @id
  name        String
  alias       String  @unique
  status      Int     @default(1)
  // type        String
  parentId    String?
  childrenIds Json?

  createdBy String
  createdAt DateTime  @default(now())
  products  Product[]
}

model Product {
  id               String  @id
  categoryId       String
  name             String
  alias            String  @unique
  originalPrice    Float
  promotionDetails String?
  status           Int     @default(0)

  createdBy String
  createdAt DateTime @default(now())

  images       Image[]
  stocks       Stock[]
  orderDetails OrderDetail[]
  category     Category      @relation(fields: [categoryId], references: [id])
}

model Order {
  id              String    @id @default(uuid())
  customerId      String
  totalAmount     Float
  exchangeRate    Json?
  shippingAddress String
  shippingMethod  String
  currency        String
  status          Int       @default(1)
  orderAt         DateTime  @default(now())
  udpatedAt       DateTime?

  details OrderDetail[]
  payment Payment?

  customer Account @relation(fields: [customerId], references: [id])
}

model OrderDetail {
  id        BigInt @id @default(autoincrement())
  orderId   String
  productId String
  quantity  Int
  price     Float
  status    Int    @default(1)

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

model Payment {
  id                String    @id @default(uuid())
  orderId           String    @unique
  transactionId     String?
  amount            Float?
  currency          String?
  paymentMethod     String
  details           Json?
  status            Int       @default(0) // 1: success, 2: amount greater than or less than
  paymentAt         DateTime?
  paymentCompleteAt DateTime?

  order Order @relation(fields: [orderId], references: [id])
}

model Warehouse {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdBy String
  createdAt DateTime @default(now())
  stocks    Stock[]
}

model Stock {
  id BigInt @id @default(autoincrement())

  inQuantity  Int
  outQuantity Int?
  condition   String

  warehouseId Int
  productId   String

  createdBy String
  createdAt DateTime @default(now())

  wharehouse Warehouse? @relation(fields: [warehouseId], references: [id])
  product    Product    @relation(fields: [productId], references: [id])
}
