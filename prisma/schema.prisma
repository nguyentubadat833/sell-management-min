// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("NUXT_DATABASE_URL")
}

model Image {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  link      String?
  location  String
  uploadAt  DateTime @default(now())
  uploadBy  Int
  productId Int?

  Product Product? @relation(fields: [productId], references: [id])
}

model Account {
  id         Int      @id @default(autoincrement())
  provider   String
  providerId String
  email      String?
  name       String?
  profile    String?
  userType   String
  registerAt DateTime @default(now())
  Order      Order[]

  @@unique([provider, providerId])
}

model Category {
  id     Int    @id @default(autoincrement())
  code   String @unique
  name   String
  alias  String @unique
  status Int    @default(1)

  createdBy Int
  createdAt DateTime  @default(now())
  Product   Product[]
}

model Product {
  id               Int     @id @default(autoincrement())
  code             String  @default(cuid())
  categoryId       Int
  name             String
  originalPrice    Float?
  promotionDetails String?
  status           Int     @default(0)

  createdBy Int
  createdAt DateTime @default(now())

  images   Image[]
  stock    Stock[]
  category Category @relation(fields: [categoryId], references: [id])
}

model Order {
  id              BigInt    @id @default(autoincrement())
  orderCode       String    @default(uuid())
  customerId      Int
  totalAmount     Float?
  shippingAddress String?
  shippingMethod  String
  currency        String
  status          Int       @default(0)
  orderAt         DateTime  @default(now())
  createdBy       Int
  createdAt       DateTime  @default(now())
  udpatedAt       DateTime?

  details OrderDetail[]
  payment Payment?

  customer Account @relation(fields: [customerId], references: [id])
}

model OrderDetail {
  id        BigInt  @id @default(autoincrement())
  orderId   BigInt?
  productId Int
  quantity  Int
  price     Float

  Order Order? @relation(fields: [orderId], references: [id])
}

model Payment {
  id            BigInt    @id @default(autoincrement())
  orderId       BigInt    @unique
  transactionId String
  amount        Float
  currency      String
  paymentMethod String
  status        Int       @default(0)
  paymentAt     DateTime?

  order Order @relation(fields: [orderId], references: [id])
}

model Warehouse {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdBy Int
  createdAt DateTime @default(now())
  Stock     Stock[]
}

model Stock {
  id BigInt @id @default(autoincrement())

  inQuantity  Int
  outQuantity Int?
  condition   String

  warehouseId Int
  productId   Int

  createdBy Int
  createdAt DateTime @default(now())

  wharehouse Warehouse? @relation(fields: [warehouseId], references: [id])
  Product    Product    @relation(fields: [productId], references: [id])
}
